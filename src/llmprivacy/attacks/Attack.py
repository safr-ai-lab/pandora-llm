from transformers import AutoModelForCausalLM
from ..utils.plot_utils import plot_ROC, plot_ROC_plotly, plot_histogram, plot_histogram_plotly

####################################################################################################
# MAIN CLASS
####################################################################################################
class MIA:
    """
    Base class for all membership inference attacks. 

    Attributes:
        model (AutoModelForCausalLM or None): the model to be attacked
        model_name (str): path to the model to be attacked
        model_revision (str, optional): revision of the model to be attacked
        cache_dir (str, optional): directory to cache the model

    """
    def __init__(self, model_name, model_revision=None, model_cache_dir=None):
        """
        Initialize with an attack for a particular model. 

        Args:
            model_name (str): path to the model to be attacked
            model_revision (Optional[str]): revision of the model to be attacked
            cache_dir (Optional[str]): directory to cache the model
        """
        self.model           = None
        self.model_name      = model_name
        self.model_revision  = model_revision
        self.model_cache_dir = model_cache_dir
    
    def load_model(self):
        """
        Loads model into memory
        """
        if self.model is None:
            self.model = AutoModelForCausalLM.from_pretrained(self.model_name, revision=self.model_revision, cache_dir=self.model_cache_dir)
        else:
            raise Exception("Model has already been loaded; please call .unload_model() first!")

    def unload_model(self):
        """
        Unloads model from memory
        """
        self.model = None

    def compute_statistic(self, dataloader, num_batches=None, **kwargs):
        """
        This method should be implemented by subclasses to compute the attack statistic for the given dataloader.

        Args:
            dataloader (DataLoader): input data to compute statistic over
            num_batches (Optional[int]): number of batches of the dataloader to compute over.
                If None, then comptues over whole dataloader
        Returns:
            torch.Tensor or list: attack statistics computed on the input dataloader
        """
        raise NotImplementedError()

    def attack_plot_ROC(self, train_statistics, val_statistics, title, log_scale=False, show_plot=True, save_name=None):
        """
        Generates and displays or saves a plot of the ROC curve for the membership inference attack.

        This method uses the inputted statistics to create a ROC curve that 
        illustrates the performance of the attack. The plot can be displayed in a log scale, 
        shown directly, or saved to a file.

        Args:
            train_statistics (Iterable[float]): Statistics of the training set. Lower means more like train.
            val_statistics (Iterable[float]): Statistics of the validation set. Lower means more like train.
            title (str): The title for the ROC plot.
            log_scale (bool, optional): Whether to plot the ROC curve on a logarithmic scale. 
                Defaults to False.
            show_plot (bool, optional): Whether to display the plot. If False, the plot is not 
                shown but is saved directly to the file specified by `save_name`. Defaults to True.
            save_name (str, optional): The file name or path to save the plot image. If not 
                specified, the default name is generated by the given title with an 
                appropriate file extension. Defaults to None.
        """
        if save_name is None:
            save_name = title + ("_log" if log_scale else "")
        plot_ROC(train_statistics, val_statistics, title, log_scale=log_scale, show_plot=show_plot, save_name=save_name)
        plot_ROC_plotly(train_statistics, val_statistics, title, log_scale=log_scale, show_plot=show_plot, save_name=save_name)
    
    def attack_plot_histogram(self, train_statistics, val_statistics, title, normalize=False, show_plot=True, save_name=None):
        """
        Generates and displays or saves a histogram of the statistics.

        Args:
            train_statistics (Iterable[float]): Statistics of the training set. Lower means more like train.
            val_statistics (Iterable[float]): Statistics of the validation set. Lower means more like train.
            title (str): The title for the ROC plot.
            log_scale (bool, optional): Whether to plot the ROC curve on a logarithmic scale. 
                Defaults to False.
            show_plot (bool, optional): Whether to display the plot. If False, the plot is not 
                shown but is saved directly to the file specified by `save_name`. Defaults to True.
            save_name (str, optional): The file name or path to save the plot image. If not 
                specified, the default name is generated by the given title with an 
                appropriate file extension. Defaults to None.
        """
        if save_name is None:
            save_name = title + ("_z" if normalize else "")
        plot_histogram(train_statistics, val_statistics, title, normalize=normalize, show_plot=show_plot, save_name=save_name)
        # plot_histogram_plotly(train_statistics, val_statistics, title, normalize=normalize, show_plot=show_plot, save_name=save_name)