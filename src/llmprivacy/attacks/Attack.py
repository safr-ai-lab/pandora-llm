from transformers import AutoModelForCausalLM
from ..utils.plot_utils import plot_ROC, plot_ROC_plotly, plot_histogram, plot_histogram_plotly

####################################################################################################
# MAIN CLASS
####################################################################################################
class MIA:
    def __init__(self, model_name, model_revision=None, model_cache_dir=None):
        """
        Base class for all membership inference attacks. Contains a "base" model image. 

        Args:
            model_name (str): path to the model to be attacked
            model_revision (Optional[str]): revision of the model to be attacked
            cache_dir (Optional[str]): directory to cache the model
        """
        self.model_name      = model_name
        self.model_revision  = model_revision
        self.model_cache_dir = model_cache_dir
    
    def get_model(self):
        """
        Returns the model that this MIA uses.
        """
        return AutoModelForCausalLM.from_pretrained(self.model_name, revision=self.model_revision, cache_dir=self.model_cache_dir)
    
    def get_statistics(self):
        """
        Abstract method to get the statistics used for ROC plotting.

        This method should be implemented by subclasses to return the training and validation
        statistics necessary for plotting the ROC curve.
        """
        raise NotImplementedError()

    def attack_plot_ROC(self, train_statistics, val_statistics, title, log_scale=False, show_plot=False, save_name=None):
        """
        Generates and displays or saves a plot of the ROC curve for the membership inference attack.

        This method uses the inputted statistics to create a ROC curve that 
        illustrates the performance of the attack. The plot can be displayed in a log scale, 
        shown directly, or saved to a file.

        Args:
            train_statistics (Iterable[float]): Statistics of the training set. Lower means more like train.
            val_statistics (Iterable[float]): Statistics of the validation set. Lower means more like train.
            title (str): The title for the ROC plot.
            log_scale (bool, optional): Whether to plot the ROC curve on a logarithmic scale. 
                Defaults to False.
            show_plot (bool, optional): Whether to display the plot. If False, the plot is not 
                shown but is saved directly to the file specified by `save_name`. Defaults to True.
            save_name (str, optional): The file name or path to save the plot image. If not 
                specified, the default name is generated by the given title with an 
                appropriate file extension. Defaults to None.
        """
        if save_name is None:
            save_name = title + ("_log" if log_scale else "")
        plot_ROC(train_statistics, val_statistics, title, log_scale=log_scale, show_plot=show_plot, save_name=save_name)
        plot_ROC_plotly(train_statistics, val_statistics, title, log_scale=log_scale, show_plot=show_plot, save_name=save_name)
    
    def attack_plot_histogram(self, train_statistics, val_statistics, title, normalize=False, show_plot=False, save_name=None):
        """
        Generates and displays or saves a histogram of the statistics.

        Args:
            train_statistics (Iterable[float]): Statistics of the training set. Lower means more like train.
            val_statistics (Iterable[float]): Statistics of the validation set. Lower means more like train.
            title (str): The title for the ROC plot.
            log_scale (bool, optional): Whether to plot the ROC curve on a logarithmic scale. 
                Defaults to False.
            show_plot (bool, optional): Whether to display the plot. If False, the plot is not 
                shown but is saved directly to the file specified by `save_name`. Defaults to True.
            save_name (str, optional): The file name or path to save the plot image. If not 
                specified, the default name is generated by the given title with an 
                appropriate file extension. Defaults to None.
        """
        if save_name is None:
            save_name = title + ("_z" if normalize else "")
        plot_histogram(train_statistics, val_statistics, title, normalize=normalize, show_plot=show_plot, save_name=save_name)
        # plot_histogram_plotly(train_statistics, val_statistics, title, normalize=normalize, show_plot=show_plot, save_name=save_name)